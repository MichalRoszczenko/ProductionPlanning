// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductionPlanning.Entities;

#nullable disable

namespace ProductionPlanning.Migrations
{
    [DbContext(typeof(PlanningDbContext))]
    [Migration("20230502162856_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductionPlanning.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("InjectionMoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InjectionMoldId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.InjectionMold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InjectionMolds");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.InjectionMoldingMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tonnage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InjectionMoldingMachines");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("InjectionMoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InjectionMoldId")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InjectionMoldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InjectionMoldingMachineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionTimeInHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InjectionMoldId");

                    b.HasIndex("InjectionMoldingMachineId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.Ingredient", b =>
                {
                    b.HasOne("ProductionPlanning.Entities.InjectionMold", "InjectionMold")
                        .WithMany("Ingredients")
                        .HasForeignKey("InjectionMoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InjectionMold");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.Material", b =>
                {
                    b.HasOne("ProductionPlanning.Entities.InjectionMold", "InjectionMold")
                        .WithOne("Material")
                        .HasForeignKey("ProductionPlanning.Entities.Material", "InjectionMoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InjectionMold");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.Production", b =>
                {
                    b.HasOne("ProductionPlanning.Entities.InjectionMold", "InjectionMold")
                        .WithMany("Productions")
                        .HasForeignKey("InjectionMoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionPlanning.Entities.InjectionMoldingMachine", "InjectionMoldingMachine")
                        .WithMany("Productions")
                        .HasForeignKey("InjectionMoldingMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InjectionMold");

                    b.Navigation("InjectionMoldingMachine");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.InjectionMold", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Productions");
                });

            modelBuilder.Entity("ProductionPlanning.Entities.InjectionMoldingMachine", b =>
                {
                    b.Navigation("Productions");
                });
#pragma warning restore 612, 618
        }
    }
}
